"""
Django settings for gpx_server project.

Generated by 'django-admin startproject' using Django 3.0.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
from corsheaders.defaults import default_headers

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('GPX_DJANGO_SECRET', 'oqij)hzfz(y&*9yh53c*&o_$@p!evxhs@k0z55xtq8rnevy@^5')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('GPX_DEBUG', True) in [True, 1, '1', 'True']

ALLOWED_HOSTS = [
    'localhost',
    'dashboard.gpx.nl',
]

# Application definition

INSTALLED_APPS = [
    'users',
    'smart_meter',

    'knox',
    'corsheaders',
    'social_django',
    'django_filters',
    'rest_framework',
    'rest_social_auth',

    'django.contrib.auth',
    'django.contrib.admin',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.contenttypes',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'gpx_server.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'), ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'gpx_server.wsgi.application'


# Email settings

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_USE_TLS = True
EMAIL_HOST = os.environ.get('GPX_EMAIL_HOST', '')
EMAIL_HOST_USER = os.environ.get('GPX_EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.environ.get('GPX_EMAIL_HOST_PASSWORD', '')
EMAIL_PORT = 587

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'USER': os.environ.get('GPX_DB_USER', 'gpx_manager'),
        'NAME': os.environ.get('GPX_DB_NAME', 'gpx_data'),
        'PASSWORD': os.environ.get('GPX_DB_PASSWORD', 'gpx_password'),
        'HOST': os.environ.get('GPX_DB_HOST', 'localhost'),
        'PORT': os.environ.get('GPX_DB_PORT', 5432),
    },
}

# Authentication

AUTH_USER_MODEL = 'users.User'

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'nl-nl'
USE_I18N = True
USE_L10N = True

USE_TZ = True
TIME_ZONE = 'Europe/Amsterdam'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, "static")

# region Third-party settings

# region REST framework
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'gpx_server.utils.permissions.MethodPermission',
    ),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'knox.auth.TokenAuthentication',
    ),
    'DATE_INPUT_FORMATS': ['%Y-%m-%dT%H:%M:%S.%fZ', 'iso-8601'],
    'EXCEPTION_HANDLER': 'gpx_server.utils.exception_handler.custom_exception_handler',
}
if DEBUG:
    REST_FRAMEWORK['DEFAULT_AUTHENTICATION_CLASSES'] += ('rest_framework.authentication.SessionAuthentication',)
    REST_FRAMEWORK['DEFAULT_RENDERER_CLASSES'] += ('rest_framework.renderers.BrowsableAPIRenderer',)

# endregion

# region KNOX auth

REST_KNOX = {
    'SECURE_HASH_ALGORITHM': 'cryptography.hazmat.primitives.hashes.SHA512',
    'AUTH_TOKEN_CHARACTER_LENGTH': 64,
    'TOKEN_TTL': None,
    'USER_SERIALIZER': 'users.serializers.UserDetailSerializer',
    'TOKEN_LIMIT_PER_USER': None,
    'AUTO_REFRESH': False,
}

# endregion

# region services

NODEJS_SECRET_TOKEN = os.environ.get('GPX_NODEJS_SECRET_TOKEN', 'testing')

# endregion

# region CORS

CORS_ALLOW_HEADERS = default_headers + (
    'withCredentials',
)
CORS_ALLOW_CREDENTIALS = True

if DEBUG:
    CORS_ORIGIN_ALLOW_ALL = True
else:
    CORS_ORIGIN_WHITELIST = ['https://dashboard.gpx.nl', 'http://localhost:4200']
    CSRF_TRUSTED_ORIGINS = ['.gpx.nl']

# endregion
